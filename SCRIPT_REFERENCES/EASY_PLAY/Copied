@vars {
lcd = "Control Seat"

mhead = "-= \x =-"
main = "Projector Drone\NProjector Bind\NPrint Drone\NExit"

* projector menu (Custom Data)
proj = ""
* projector name
prjn = ""
* projector option set
prjs = ""

menu = ""
mid = "main"
marg = ""
msel = ""
mopt = 1

x = 0
}

@menu {
\lcd = cond(Oper of Control Seat = True : "Control Seat" : "PB EasyPlay")

if \1 ? \ {
  \x = Text of \lcd
  if \x ? "-=" { 
    \marg = select 
  } else { 
    \marg = ""
    @tomenu(\main,main)
  }
} else {
  \marg = \1
}

if \menu = "" {
   \menu = \main
}
\x = TokenLine of menu

if \marg = exit {
  @tomenu(exit)

} else if \marg = down {
  if \prjs = "" {
     \mopt = math(\mopt + 1)
     if \mopt > \x { 
       \mopt = 1 
     }
  } else {
    @menu_project_set(\marg)
  }

} else if \marg = up {
  if \prjs = "" {
     \mopt = math(\mopt - 1)
     if \mopt = 0 { 
       \mopt = \x 
     }
  } else {
    @menu_project_set(\marg)
  }

} else if \marg = select {
  if \mid = main {
     if \msel != "main\mopt" { 
       @menu_main 
     } else { 
       @tomenu(\main,main) 
     }
   } else { 
     if \msel != "proj\mopt" { 
       @menu_project
     } else { 
       @menu_project_write
       \msel = "proj0"
     }
   }
}

\x = cond(\mid = "main" : "Projector Menu" : "\prjn Set")
Write to \lcd = "\mhead\N"
WriteLineMenu(\mopt) to \lcd = \menu
}

@tomenu {
if \1 = exit {
  \menu = \main
  \mid = "main"
  \msel = ""
  \marg = ""
  \prjs = ""
  Write to \lcd = ""
  @projector_switch(0,0)
  Stop
} else {
  \mopt = 1
  \menu = \1
  \mid  = \2
}
}

@menu_main {
\msel = "main\mopt"
\x = TokenLine[\mopt] of menu

if \x = "Exit" {
  @tomenu(exit)
} else if \x ? "Print" {
  @drone_print
} else {
  \prjn = \x
  OnOff_On \prjn
  \proj = Data of \x
  if \proj = "" {
    @menu_project_write
    \proj = Data of \prjn
  }
  @tomenu(\proj,proj)
}
}

@menu_project {
\msel = "proj\mopt"
\x = TokenLine[\mopt] of menu

if \x ? "main" {
  OnOff_Off \prjn
  @tomenu(\main,main)
} else {
  @menu_project_write(\x)
}

}

@menu_project_write {
Data of \prjn = ""

\x = cond("\1" ? "Pos X" : "=" : ":")
DataLine of \prjn = "Pos X \x {X of \prjn}"

\x = cond("\1" ? "Pos Y" : "=" : ":")
DataLine of \prjn = "Pos Y \x {Y of \prjn}"

\x = cond("\1" ? "Pos Z" : "=" : ":")
DataLine of \prjn = "Pos Z \x {Z of \prjn}"

\x = cond("\1" ? "Rot X" : "=" : ":")
DataLine of \prjn = "Rot X \x {RotX of \prjn}"

\x = cond("\1" ? "Rot Y" : "=" : ":")
DataLine of \prjn = "Rot Y \x {RotY of \prjn}"

\x = cond("\1" ? "Rot Z" : "=" : ":")
DataLine of \prjn = "Rot Z \x {RotZ of \prjn}"

DataLine of \prjn = "Main menu"
\menu = Data of \prjn

if TokenLine[\mopt] of menu ? "=" {
  \prjs = TokenLine[\mopt] of menu
} else if \1 ? \ {
  \prjs = ""
}
}

@menu_project_set {
if \prjs ? "Pos" {
  if \1 = down {
     if \prjs ? X {
        IncreaseX \prjn
     } else if \prjs ? Y {
        IncreaseY \prjn
     } else {
        IncreaseZ \prjn
     }
  } else {
     if \prjs ? X {
        DecreaseX \prjn
     } else if \prjs ? Y {
        DecreaseY \prjn
     } else {
        DecreaseZ \prjn
     }
  }
} else {
  if \1 = down {
     if \prjs ? X {
        IncreaseRotX \prjn
     } else if \prjs ? Y {
        IncreaseRotY \prjn
     } else {
        IncreaseRotZ \prjn
     }
  } else {
     if \prjs ? X {
        DecreaseRotX \prjn
     } else if \prjs ? Y {
        DecreaseRotY \prjn
     } else {
        DecreaseRotZ \prjn
     }
  }
}
@menu_project_write(\prjs)
}

@drone_print {
if StatusX of Connector Print = Unconnected {
  @projector_switch(0,1)
  Delay 1000
  OnOff_On Welder Print
  Delay 5000
  OnOff_Off Welder Print
  OnOff_On Ion Print
  Delay 20000
  OnOff_Off Ion Print
  @projector_switch(0,0)
  OnOff_On Welder Print
  Delay 1000
  OnOff_Off Welder Print
  Lock Connector Print
}
Stop
}

@projector_switch {
\x = math(\1 + 1)
\mopt = TokenLine[\x] of main

if \mopt != "Print Drone" {
   if \2 = 1 {
    OnOff_On \mopt
  } else {
    OnOff_Off \mopt
  }
  @projector_switch(\x,\2)
}
}

@show {
Show \1
}

Copter

@var {
v = 60
}

@ landing {
    OnOff_Off Light Flash
    if Value of v > 0 {
        \v = math(\v - 10)
        Echo = \v
        Velocity of Rotor Copter = \v
        Delay 300
        @landing
    }
    \v = 60 
}

@ escape {
    OnOff_On Light Flash
    Velocity of Rotor Copter = 60
}

@show {
Show Rotor Copter
}


@var {
lcd = "Cockpit Cruise"
camera = "Camera Cruise"
range  = 15000
mind = 5
over = 100
kr = 0.0261
kb = 0.0268

lidar = Data of \camera
dist  = Distance \lidar of MyShip
cont  = Operate of MyShip

s = 0
b = 0
x = 0
y = 0
z = 0
w = 0
}

@fly4 {
\s = 0
\b = 0
@check

if Damp of MyShip = False {
   Damp of MyShip = True
}

if \kr ? "." { 
  if \1 ? "go" { @scan }
  if \dist > 0 {
     \x = math((\mind/\dist)*100) 
     if \x > 70 { @info(Stop,Reach) }
  }
} else {
  @setup(50)
}

if \lidar ? GPS {
  @speed(0)
  if \s = 0 { @info(Stop,Reach) }

  OnOff_On (Thruster Fwd)
  OnOff_Off (Thruster Bwd)
  Override of (Thruster Fwd) = \over%
  @race
  Override of (Thruster Fwd) = 0
  OnOff_On (Thruster Bwd)
  @brake
  \x = math((\mind/\dist)*100) 
  if \x < 70 { @fly4 }
  @info(Stop,Reach)
} else {   
  @info(Fly,No GPS)
}
}

@race {
if \b < \dist {
   \y = math(Speed of MyShip + 1)
  if \s < \y {
    Override of (Thruster Fwd) = 0
    \y = "Free fly"
  } else {  
    \y = "Racing"
  }
  \x = OperAxis of \cont
  if \x = True {
    @info(Stop,Break)
  } else {
    @info(\y/\s,\dist/\b m)
  }
  Delay 100
  @race
}
}

@brake {
if Speed of MyShip > 1 {
  \x = OperAxis of \cont
  if \x = True {
    @info(Stop,Break)
  } else {
    @info(Braking,\dist m) 
  }
  Delay 100
  @brake
}
}

@speed {
\z = math(\1+10)
if \z < 101 {
   \x = math((Mass of MyShip/10000) * \kr * \z * \z)
   \y = math((Mass of MyShip/10000) * \kb * \z * \z)
   \w = math(\x + \y + \mind)
*   Echo = "\z : \w"
   if \w < \dist {
       \b = math(Int(\y+\mind))
       \s = \z
       @speed(\z)
   }
}
}

@check {
\x = OnOff of \camera
if \x != True {
  @info(Stop,Camera turn off or not found)
} else if Number of (Thruster Fwd) = 0 {
  @info(Stop,Group (Thruster Fwd) not found)
} else if Number of (Thruster Bwd) = 0 {
  @info(Stop,Group (Thruster Bwd) not found)
} else if \mind < 1 {
  @info(Stop,"mind" must be > 0)
} else if \over < 1 {
  @info(Stop,"over" must be > 0)
}
}

@scan {
Scanr of \camera at \range
if \dist > 0 {
  @info(Scan,\dist m)
  Write to LCD Lidar = "Target: \dist m" 
} else {
  @info(Scan,No Target)
  Write to LCD Lidar = "No Target" 
}
}

@info {
\w = math(int(Speed of MyShip))
if \lcd = "" {
   Echo =  "Mode: \1\NTarget: \2\NSpeed: \w m/s"
 } else {
   Write to \lcd = "Mode: \1\NTarget: \2\NSpeed: \w m/s"
}
if \1 = Stop { 
   Over of (Thruster Fwd) = 0
   OnOff_On (Thruster Bwd)
   Data of \camera = ""
   Stop 
}
}

@setup {
\s = Speed of MyShip
if \s < 1 {
  \s = cond(\1 > 99 : 99 : \1)
  OnOff_On (Thruster Fwd)
  OnOff_On (Thruster Bwd)

  @sout(Calculate...)
  \y = Grid Pos of MyShip
  Data of \camera = \y

  OnOff_Off (Thruster Bwd)
  Override of (Thruster Fwd) = \over%
  When Speed of MyShip > \s

  \z = Distance \lidar of MyShip
  \y = math(\z / (Base Mass of MyShip/1000) / (\1*(\1/10)))
  \w = "Racing: \z m\Nkr = \y"

  \z = Grid Pos of MyShip
  Data of \camera = \z

  Override of (Thruster Fwd) = 0
  OnOff_On (Thruster Bwd)
  When Speed of MyShip < 1

  \z = Distance \lidar of MyShip
  \y = math(\z / (Base Mass of MyShip/1000) / (\1*(\1/10)))

  @sout(\w\NBrake = \z m\Nkb = \y)
} else {
  @sout(Stop the ship)
}
Stop
}

@sout {
if \lcd = "" { Echo = \1 } else { Write to \lcd = \1 }
}

===========================
@var {
lcd = Data of Timer EasySync
my = Grid Name of MyShip
pos = Grid Margin[30] of MyShip
camera = Camera SEC Lidar
lidar = Data of \camera
radio = Send of MyShip
range = 15000
racing = 99

mhead   = "= Ship Control Menu ="
main    = "Ship status\NShip control\NDrone control\NLidar targeting\NGPS navigator\NShow horizon\NMenu color"
control = "Thruster mode:\NWeapon mode:\NBroadcast       :\NHold gate        :"
invent  = "General info\NTurret status\NStock ingots\NShip damage"
drone   = "Drone status\NSend to target\NCall to carrier\NPrint drone\NRelease drone"
target  = "Scan target\NShow target\NClear target\NFly to target\NSend drones"
gpsmap  = "\N"

menu = ""
mid = "main"
marg = ""
msel = ""
mopt = 1

x = 0
}

@test {
Echo = ""
}

@menu {
if \1 ? \ {
  \x = Text of \lcd
  if \x ? \mhead { 
    \marg = select 
  } else { 
    \marg = ""
    @tomenu(\main,main)
  }
} else {
  \marg = \1
}

if \menu = "" {
   \menu = \main
}
\x = TokenLine of menu

if \marg = exit {
  @tomenu(exit)

} else if \marg = down {
  \mopt = math(\mopt + 1)
  if \mopt > \x { 
    \mopt = 1 
  }

} else if \marg = select {
  if \mid = main {
     if \msel != "main\mopt" { 
       @menu_main 
     } else { 
       @tomenu(\main,main) 
     }
   } else if \mid = control { 
     if \msel != "control\mopt" { 
       @menu_control 
     } else { 
       @tomenu(\main,main) 
     }
   } else if \mid = invent { 
     if \msel != "invent\mopt" { 
       @menu_invent 
     } else { 
       @tomenu(exit) 
     }
   } else if \mid = drone { 
     if \msel != "drone\mopt" { 
        @menu_drone 
     } else { 
       @tomenu(exit) 
     }
   } else if \mid = target { 
     if \msel != "target\mopt" { 
       @menu_target 
     } else { 
       @tomenu(\main,main) 
     }
   } else if \mid = gpsmap { 
     if \msel != "gpsmap\mopt" { 
       @menu_gpsmap
     } else { 
       @tomenu(\main,main) 
     }
   }
}

Write to \lcd = "\mhead\N"
WriteLineMenu(\mopt) to \lcd = \menu
}

@tomenu {
if \1 = exit {
  \menu = \main
  \mid = "main"
  \msel = ""
  \marg = ""
  BgColor of \lcd = "0:0:0"
  Write to \lcd = ""
  Stop
} else {
  \mopt = 1
  \menu = \1
  \mid  = \2
}
}

@menu_main {
\msel = "main\mopt"
\x = TokenLine[\mopt] of menu

if \x ? "status" {
  @tomenu(\invent,invent)
} else if \x ? "ship control" {  
  @tomenu(\control,control)
  @menu_control_set
} else if \x ? "drone" {  
  @tomenu(\drone,drone)
} else if \x ? "lidar" {  
  @tomenu(\target,target)
} else if \x ? "navigator" {
  @menu_gpsmap_write
} else if \x ? "horizon" {  
  WriteScript to \lcd = TSS_ArtificialHorizon
  Stop
} else if \x ? "color" { 
  \x = BgColor of \lcd
  \x = cond("\x" = "0:0:0" : "50:65:205" : "0:0:0")
  BgColor of \lcd = \x
  \msel = "main0"
}
}

@menu_gpsmap {
\x = TokenLine[\mopt] of menu
\msel = Data of Jump Drive

if \x ? "Set" {
   \x = TokenLine of msel
   DataLine of Jump Drive = "GPS:Point \x:{Grid Pos of MyShip}:#"
   @menu_gpsmap_write
} else {
   \x = TokenLine[\mopt] of msel
   Data of \camera = \x
   Fly Clear
   Fly to \x at \racing
   OnOff_Off Thruster on MyGrid
   OnOff_On (SEC, Econom Thrusters)
   Fly Start
   \msel = "main0"
   Stop
}
}

@menu_gpsmap_set {
\x = math(\x + 1)
\msel = Data of Jump Drive
\mopt = math(TokenLine of msel + 1)

if \mopt > \x {
   \menu = TokenLine[\x] of msel
   \mid = Token[2] of menu
   DataLine of \lcd = \mid
   @menu_gpsmap_set
}
}

@menu_gpsmap_write {
\x = 0
Data of \lcd = "Set GPS Point"
@menu_gpsmap_set
\gpsmap = Data of \lcd
@tomenu(\gpsmap,gpsmap)
}

@menu_control {
\msel = "control\mopt"
\x = TokenLine[\mopt] of menu

if \x ? "thruster" {
  if \x ? "force" {
    OnOff_Off Thruster on MyGrid
    OnOff_On (SEC, Econom Thrusters)
  } else if \x ? "econom" {
    OnOff of Thruster on MyGrid = False
  } else {
    OnOff of Thruster on MyGrid = True
  }
} else if \x ? "weapon" {
  if \x ? "armed" {
    OnOff_On (SEC, PDC Turret)
    OnOff_Off (SEC, Artillery)
  } else if \x ? "pdc" {
    OnOff of Turret on MyGrid = False
  } else {
    OnOff of Turret on MyGrid = True
  }
} else if \x ? "broadcast" {
  if \x ? "air" {
    OnOff_Off Antenna
    OnOff_Off Beacon
  } else {
    OnOff_On Antenna
    OnOff_On Beacon
  }
} else if \x ? "gate" {
  @gate(menu)
}
@menu_control_set
\msel = "control0"
}

@menu_control_set {
\x = TokenLine[1] of control
if OnOff of Thruster on MyGrid = True {
  if OnOff of Hydrogen Thruster Force = True { 
    \x = "\x Force" 
  } else { 
    \x = "\x Econom" 
  }
} else {
  \x = "\x Off"
}
TokenLine[1] of menu = \x

\x = TokenLine[2] of control
if OnOff of Turret on MyGrid = True {
  if OnOff of (SEC, Artillery) = True { 
    \x = "\x Armed" 
  } else {
    \x = "\x PDC"
  }
} else {
  \x = "\x Off"
}
TokenLine[2] of menu = \x

\x = TokenLine[3] of control
if OnOff of Antenna = True {
  \x = "\x On air"
} else {
  \x = "\x Silent"
}
TokenLine[3] of menu = \x

\x = TokenLine[4] of control
if Position of Piston Gate = 1 {
  \x = "\x Close"
} else {
  \x = "\x Open"
}
TokenLine[4] of menu = \x
}

@menu_invent {
\msel = "invent\mopt"
\x = TokenLine[\mopt] of menu

if \x ? "general" {
  @ship_status
} else if \x ? "turret" {
  WriteLine to \lcd = "{Status Turret of MyGrid}"
} else if \x ? "ingot" {
  WriteLine to \lcd = "{Invent ingot[*] of MyGrid}"
} else if \x ? "damage" {
  if OnOff of Projector SEC = False {
     OnOff_On Projector SEC
     Delay 1000
  }
  \x = Info[4] of Projector SEC
  \x = math((\x) * 100.0)
  \x = math(Int(\x))
  WriteLine to \lcd = "Total blocks     : {Info[4] of Projector SEC} (\x %)
Armor damage : {Armor blocks of Projector SEC}"
  OnOff_Off Projector SEC
}
Stop
}

@menu_drone {
\msel = "drone\mopt"
\x = TokenLine[\mopt] of menu

if \x ? "status" {
  @drone_status
} else if \x ? "Send" {
  @drone_deploy
} else if \x ? "Call" {
  @drone_call  
  @lcd_line(Call drone to carrier)
} else if \x ? "Print" {
  @drone_print(menu)
} else if \x ? "Release" {
  \x = cond(StatusX of Connector Print = Connected & OnOff of Welder Print = False : 1 : 0)
  if \x = 1 {
    @lcd_line(Release drone started)
    @drone_release
  } else {
    @lcd_line(Drone not ready)
  }
}
Stop
}

@menu_target {
\msel = "target\mopt"
\x = TokenLine[\mopt] of menu

if \x ? "scan" {
  @scan(menu)
  \msel = "target0"
} else if \x ? "show" {
  @scan(show)
} else if \x ? "clear" {
  Fly Clear
  Data of \camera = ""
  @lcd_line(Lidar target clean)
} else if \x ? "fly" {
  if \lidar ? GPS {
    OnOff_Off Thruster on MyGrid
    OnOff_On (SEC, Econom Thrusters)
    AutoPilot of Remote SEC = True
    \x = Token[3] of lidar
    @lcd_line(Fly to \x started)
  } else {
    @lcd_line(No target to fly)
  }
} else if \x ? "send" {
  @drone_deploy
}
Stop
}

@drone_deploy {
if \lidar ? GPS {
  @drone_send
  @lcd_line(Send drone to tagret)
} else {
  @lcd_line(No target to send drone)
}
}

@lcd_line {
\x = Time[dd/MM/yy HH:mm:ss] of MyShip
WriteLine to \lcd = "\x\N\1"
}

@ship_status {
\x = math(int(InvX Ice of MyGrid / 1000))

WriteLine to \lcd = "Battery   : {StatusM Battery of MyGrid} %
O2/H2    : {StatusM Oxygen Tank of MyGrid} / {StatusM Hydrogen Tank of MyGrid} %%
Ice/Uran : \x tn / {InvX Uranium of MyGrid} kg"

WriteLine to \lcd = "\NReactors active   : {Status[Active] Reactor of MyGrid}
O2/H2 Generator : {Status[Active] O2/H2 Generator of MyGrid}"

if Status of Jump Drive = Charging {
  \x = Info[6] of Jump Drive
} else {
  \x = math((Info[7] of Jump Drive * JumpDistance of Jump Drive)/100)
  \x = math(Int(\x)+5)
}
WriteLine to \lcd = "Jump: {Status of Jump Drive} to \x/{Info[7] of Jump Drive}"
WriteLine to \lcd = "\N{Status Connector of AllGrid}"
}

@radio {
if \radio ? "T-Fighter" { 
  if \radio ? "callback" {
    @drone_call
  } else if \radio ? "status" {
    \x = Text of \lcd 
    if \x ? "T-Fighter" {
      WriteLine to \lcd = "\1\N"
    } else {
      Write to \lcd = "\1\N"
      Delay 200
    }
  }
}
Send Clear
}

@drone_stop {
Send to Antenna SEC = "\my:@order(stop)" 
}

@drone_call {
Send to Antenna SEC = "\my:@order(call,GPS:\pos:#)"
}

@drone_send {
if \lidar ? "GPS" {
  Send to Antenna SEC = "\my:@order(send,\lidar)" 
}
}

@drone_status {
  \x = Grid Pos of MyShip  
  Send to Antenna SEC = "\my:@order(status,GPS:\x:#)"
}

@drone_print {
if Text of LCD Autokit ? staff {
  if StatusX of Connector Print = Unconnected {
     if \1 = menu { 
        @lcd_line(Print drone started) 
     }
     Move Piston Print to  8.25 at 3
     When Position of Piston Print > 8.0
     OnOff_On Projector Print TF1
     OnOff_On  Welder Print
     Delay 200
     OnOff_On Projector Print TF2
     Move Piston Print to 0 at 0.2
  } else {
    if \1 = menu { 
       @lcd_line(Connector print occuped) 
    }
  }
} else{
  if \1 = menu { 
     @lcd_line(Not enough components) 
  }
}
}

@drone_release {
OnOff_On Projector Print TF1
Delay 300
\x = Info[4] of Projector Print TF1
\x = math(\x)
OnOff_Off Projector Print TF1

if \x = 1 {
   if Position of Piston Gate = 1 { 
      @gate 
   }
   @printgun
   RunAll PBL EasyPlay(gateout)
}
}

@printgun {
if Angle of Hinge Gun 2 > 2 {
   Rotate Hinge Gun 2 to 0 at 3
   Rotate Hinge Gun 1 to 0 at 3
   When Angle of Hinge Gun 2 = 0.0
   Velocity of Hinge Gun = 0
} else {
   Rotate Hinge Gun 2 to 90 at 3
   Rotate Hinge Gun 1 to -90 at 3
   When Angle of Hinge Gun 2 = 90.0
   Velocity of Hinge Gun = 0
   Delay 200
   ShootOnce Print Gun
   Delay 200
   ShootOnce Print Gun
   @printgun
 }
}

@printlcd {
If Position of Piston Print = 0 {
   OnOff_On Projector Print TF2
   Delay 2000
   if Text of LCD Print ? "COMPONENTS:" {
       Run PB Projector = Projector Print TF2;;LCD Print
       Write to Buttons Hold[3] = "Components\Nfor drone"
   } else {
      Run PB Projector = Projector Print TF2;LCD Print
      Write to Buttons Hold[3] = "Ingots & Ores\Nfor drone"
   }
   OnOff_Off Projector Print TF2
}
}

@scan {
\x = cond(\1 ? \ | \1 ? menu : 1 : 0)

if \x ? 1 { 
  if \1 ? \ { 
    Write to \lcd = "... Wait Lidar ...\N" 
  }
  Scan of \camera at \range
  if \lidar ? "GPS" { 
     Fly Clear
     Fly to \lidar at \racing
  }
  if \1 ? \ { 
    Write to \lcd = "= Ship Lidar =\N" 
  }
}

if \1 ? menu {
  Write to \lcd = "\mhead\N"
  WriteLineMenu(\mopt) to \lcd = \menu
}

\x = Distance \lidar of MyShip
Delay 100
if \x > 0 {
  WriteLine to \lcd = "Distance: \x m\N{Token[3] of lidar}: {Token[5] of lidar} m"
} else {
  WriteLine to \lcd = "No Target"
}
WriteLine to \lcd = "Scan at: \range m"
}

@gate {
if Position of Piston Gate = 1 {
   Reverse Piston Gate
   Delay 2000
   Reverse Hinge Gate
   if \1 = menu {
     When Position of Piston Gate = 10
   }
   Write to Buttons Hold[0] = "Gate\NOpen"
} else if Position of Piston Gate = 10 {
   Reverse Hinge Gate
   Delay 3000
   Reverse Piston Gate
   if \1 = menu {
     When Position of Piston Gate = 1
   }
   Write to Buttons Hold[0] = "Gate\NClose"
}
Send Clear
}

@show {
Show \1
}

=======================================
@var {
lcd = "LCD Info"
camera = "Camera"
range  = 15000
mind = 40
over = 100
kr = 0.0005
kb = 0.0025

lidar = Data of \camera
dist  = Distance \lidar of MyShip
cont  = Operate of MyShip

s = 0
b = 0
x = 0
y = 0
z = 0
w = 0
}

@test {
Echo = "{Base Mass of MyShip}"
}

@retro {
if Damp of MyShip = False {
   Damp of MyShip = True
}
OnOff_On Thruster
Over of (Thruster Fwd) = 0
@pitch
When Speed of MyShip < 5
@pitch
}

@pitch {
Pitch of Gyro = 30
Over of Gyro = True
Delay 1680
Over of Gyro = False
Pitch of Gyro = 0
}

@airlock {
If Data of Door Int = "" {
  Data of Door Int = "Airlock"
  if Status of Door Int = Open {
     OnOff_Off Door Ext
     Open_Off Door Int
     Delay 1500
     OnOff_On Door Ext
     Open_On Door Ext
  } else if Status of Door Ext = Open {
     OnOff_Off Door Int
     Open_Off Door Ext
     Delay 1500
     OnOff_On Door Int
     Open_On Door Int
  }
  Delay 2000
  Open_Off Door
  Data of Door Int = ""
}
}

@calc {
\s = 0
\b = 0
@scan
@speed(0)
Echo = "\NCalc: \s / \b"
}

@speed {
\z = math(\1+10)
if \z < 101 {
    \x = math((Mass of MyShip/10000) * \kr * \z * \z)
    \y = math((Mass of MyShip/10000) * \kb * \z * \z)
    \w = math(\x + \y + \mind)
*   Echo = "\z :  \w : \dist"
   if \w < \dist {
       \b = math(Int(\y+\mind))
       \s = \z
       @speed(\z)
   }
}
}

@fly4 {
\s = 0
\b = 0
@check

if \kr ? "." { 
  if \1 ? "go" { @scan }
  if \dist > 0 {
     \x = math((\mind/\dist)*100) 
     if \x > 70 { @info(Stop,Reach) }
  }
} else {
  @setup(50)
}

if \lidar ? GPS {
  @speed(0)
  if \s = 0 { @info(Stop,Reach) }

  OnOff_On (Thruster Fwd)
  OnOff_Off (Thruster Bwd)
  Override of (Thruster Fwd) = \over%
  @race
  Override of (Thruster Fwd) = 0
  OnOff_On (Thruster Bwd)
  @brake
  \x = math((\mind/\dist)*100) 
  if \x < 70 { @fly4 }
  @info(Stop,Reach)
} else {   
  @info(Fly,No GPS)
}
}

@race {
if \b < \dist {
   \y = math(Speed of MyShip + 1)
  if \s < \y {
    Override of (Thruster Fwd) = 0
    \y = "Free fly"
  } else {  
    \y = "Racing"
  }
  \x = OperAxis of \cont
  if \x = True {
    @info(Stop,Break)
  } else {
    @info(\y/\s,\dist/\b m)
  }
  Delay 100
  @race
}
}

@brake {
if Speed of MyShip > 1 {
  \x = OperAxis of \cont
  if \x = True {
    @info(Stop,Break)
  } else {
    @info(Braking,\dist m) 
  }
  Delay 100
  @brake
}
}

@check {
\x = OnOff of \camera
if \x != True {
  @info(Stop,Camera turn off or not found)
} else if Number of (Thruster Fwd) = 0 {
  @info(Stop,Group (Thruster Fwd) not found)
} else if Number of (Thruster Bwd) = 0 {
  @info(Stop,Group (Thruster Bwd) not found)
} else if \mind < 1 {
  @info(Stop,"mind" must be > 0)
} else if \over < 1 {
  @info(Stop,"over" must be > 0)
}
}

@scan {
Scanr of \camera at \range
if \dist > 0 {
  @info(Scan,\dist m)
  Write to LCD Lidar = "Target: \dist m" 
} else {
  @info(Scan,No Target)
  Write to LCD Lidar = "No Target" 
}
}

@info {
\w = math(int(Speed of MyShip))
if \lcd = "" {
   Echo =  "Mode: \1\NTarget: \2\NSpeed: \w m/s"
 } else {
   Write to \lcd = "Mode: \1\NTarget: \2\NSpeed: \w m/s"
}
if \1 = Stop { 
   Over of (Thruster Fwd) = 0
   OnOff_On (Thruster Bwd)
   Data of \camera = ""
   Stop 
}
}

@setup {
\s = Speed of MyShip
if \s < 1 {
  \s = cond(\1 > 99 : 99 : \1)
  OnOff_On (Thruster Fwd)
  OnOff_On (Thruster Bwd)

  @sout(Calculate...)
  \y = Grid Pos of MyShip
  Data of \camera = \y

  OnOff_Off (Thruster Bwd)
  Override of (Thruster Fwd) = \over%
  When Speed of MyShip > \s

  \z = Distance \lidar of MyShip
  \y = math(\z / (Base Mass of MyShip/1000) / (\1*(\1/10)))
  \w = "Racing: \z m\Nkr = \y"

  \z = Grid Pos of MyShip
  Data of \camera = \z

  Override of (Thruster Fwd) = 0
  OnOff_On (Thruster Bwd)
  When Speed of MyShip < 1

  \z = Distance \lidar of MyShip
  \y = math(\z / (Base Mass of MyShip/1000) / (\1*(\1/10)))

  @sout(\w\NBrake = \z m\Nkb = \y)
} else {
  @sout(Stop the ship)
}
Stop
}

@sout {
if \lcd = "" { Echo = \1 } else { Write to \lcd = \1 }
}

@vars {
brake = cond(Status of S1 Connector = Unconnected : 850 : 750)
lidar = Data of Camera Lidar
help = 1  
x = 0
}

@s2_merge {
if Natural Gravity of MyShip = 0.00 { 
  if Status of S1 Connector ? Connectable {
     Lock S1 Connector
     Delay 100
     OnOff_Off Thruster
     Run S2 PBL Solar(pause)
     OnOff_On S1 Hydro Thruster
     Rotate Hinge Solar to 90 at 3  
  } else if Status of S1 Connector != Unconnected {
     OnOff_On Thruster
     Start S2 Timer
     Unlock S1 Connector
     Delay 100
     Over of S1 Hydro Thruster Forw = 30%
     Delay 500
     Over of S1 Hydro Thruster Forw = 0
  }
}
}

@s2_call {
if Status of S1 Connector = Unconnected {
    \x = Grid Position of S1 Remote
    Send = "SE Sputnic:@fly4gps(GPS:S1:\x:#)"
    @info(Send signal)
}
}

@fly4lidar {
if Data of Camera Lidar ? GPS {
   @info(Fly To Lidar)
   OnOff_On Thruster
   OnOff_Off Thruster Back
   Override of Thruster Forw = 100%
   When Speed of MyShip > 95
   Override of Thruster Forw = 0
   @fly
   OnOff_On Thruster
   When Speed of MyShip < 5
   OnOff_Off S2 Hydro Thruster
   Data of Camera Lidar = ""
   @info(Ready)
} else {   
  @info(No Lidar Data)
}
}

@fly {
\x = Distance \lidar of MyShip
@info(Distance: \x m)
if Value of x > \brake {
   Delay 500
   @fly 
}
}

@info {
if Value of 1 = Ready {
    PlaySound Dinamic
}
Write to LCD Auto = "Easy Play\N\1"
}

@help {
if Value of help < 2 {
  \help = math(\help + 1)
} else {
  \help = 1
}
Write to Cockpit = "{Data[@help_\help] of Cockpit}"
}

@show {
show \1
}

@vars {
lidar = Data of CN Camera left
brake = 750
smax = 95
x = 0
y = 0
z = 0
}

@scan {
Scan of CN Camera left at 15000
\x = Distance \lidar of MyShip
@info(Distance: \x m)
}

@fly4lidar {
if Value of lidar ? GPS {
   @info(Fly To Lidar)
   OnOff_On Thruster
   OnOff_Off Thruster Back
   Override of Thruster Forw = 100%
   @fly
   OnOff_On Thruster
   @retro
   When Speed of MyShip < 5
   Data of CN Camera Left = ""
   @info(Fly complete)
} else {   
  @info(No Lidar Data)
}
}

@fly {
\x = Distance \lidar of MyShip
\y = math(int(Speed of MyShip))
\z = cond(\x < \brake | \y > \smax : True : False)

if \z = True {
   Override of Thruster Forw = 0
}

@info(Distance: \x m\NSpeed: \y)
if \x > \brake {
   Delay 300
   @fly 
}
}

@info {
Write to CN Pilot Seat Top = "Easy Play\N\N\1"
}

@jump {
\x = math((\1 / Info[7] of Jump Drive 1 ) * 100)
JumpDistance of Jump Drive 1 = \x
}

@airlock {
If Data of CN Door Bridge Int = "" {
  Data of CN Door Bridge Int = "Airlock"
  if Status of CN Door Bridge Int = Open {
     OnOff_Off CN Door Bridge Ext
     Open_Off CN Door Bridge Int
     Delay 1000
     OnOff_On CN Door Bridge Ext
     Open_On CN Door Bridge Ext
  } else if Status of CN Door Bridge Ext = Open {
     OnOff_Off CN Door Bridge Int
     Open_Off CN Door Bridge Ext
     Delay 1000
     OnOff_On CN Door Bridge Int
     Open_On CN Door Bridge Int
  }
  Delay 2000
  Data of CN Door Bridge Int = ""
}
}

@welders {
if OnOff of Welder = False {
  OnOff_On Welder on MyGrid
  Color of CN Light Hold Top = 255:0:0
  Write to Buttons Hold left[3] = Welders\NActive
  Write to Buttons Hold Right[0] = Welders\NActive
} else {
  OnOff_Off Welder on MyGrid
  Set Light Hold Top on CN Light Hold
  Radius of Light Hold Top = 15
  Write to Buttons Hold left[3] = Welders\NOff
  Write to Buttons Hold Right[0] = Welders\NOff
}
}

@retro {
if Speed of MyShip > 0 {
   if Damp of MyShip = True {
      Damp of MyShip = False
   } 
   \x = Grid Pos of CN Pilot Seat Int
   \y = GPS:\x
   Delay 300
   Fly to \y at 0
   Fly Start
   When Speed of MyShip < 5
   Fly Clear
}
}

@gate {
if Value of 1 = Left {
  \x = cond(Angle of Hinge Gate left = 0 : -90 : 0) 
  \y = \x
  Rotate Hinge Gate left to \x at 3
  When Angle of Hinge Gate left = \y
  \y = cond(Angle of Hinge Gate left = 0 : Open : Close)   
  Write to Buttons Hold left[0] = "Left Gate\N\y"
} else if Value of 1 = Right {
  \x = cond(Angle of Hinge Gate right = 0 : 90 : 0)
  \y = \x
  Rotate Hinge Gate right to \x at 3
  When Angle of Hinge Gate right = \y
  \y = cond(Angle of Hinge Gate right = 0 : Open : Close)   
  Write to Buttons Hold Right[3] = "Right Gate\N\y"
}
}

@scooter {
if Status of Sensor Scooter ext = "SE Scooter" {
    if Status of Scooter Door ext = Closed {
      Open_On Scooter Door ext
      Data of Scooter Door ext = ""
    } else if Status of Scooter Door ext = Open {
      When Status of Sensor Scooter ext != "SE Scooter"
      Open_Off Scooter Door ext
      Data of Scooter Door ext = OutSide
    }
} else if Status of Sensor Scooter int = "SE Scooter" {
    if Status of Scooter Door ext = Open {
      Open_Off Scooter Door ext
      if Data of Scooter Door ext = "" {
         Data of Scooter Door ext = Inside
      } 
    } else {
      Open_On Scooter Door ext
    }
} else {
    if Status of Scooter Door ext = Open {
      Open_Off Scooter Door ext
    } else {
      Open_On Scooter Door ext
    }
}
}

@but4 {
\x = Surface of \2
Surface of \1[0] = \x
Surface of \1[1] = \x
Surface of \1[2] = \x
Surface of \1[3] = \x
}

@set {
Echo = \2
Set \1 on \2
}

@show {
show \1
}

@variables{
    * Abreviated names for blocks
    AIVE = "Air Vent Fan"
    ANTE = "Antenna"
    BATT = "Battery"
    BEAC = "Beacon"
    COMA = "Connector Main"
    EVC2 = "Event Controller - Connect"
    EXPI = "Exhaust Pipe"
    GATU = "Gatling Turret"
    GYRO = "Gyroscope"
    HELI = "Headlight"
    HLL1 = "Hinge Landing Leg 1"
    HYEN = "Hydrogen Engine"
    HYTA = "Hydrogen Tank"
    LCIN = "LCD Info"
    LIGH = "Light"
    LIPA = "Light Panel Floor"
    LIST = "Light Status"
    O2H2 = "O2/H2 Generator"
    ORDE = "Ore Detector"
    PAHA = "Parachute Hatch"
    PRPA = "Program [PAM]"
    PIJA = "Piston Jack"
    ROAR = "Rotor Arm"
    ROLI = "Rotating Light"
    SPLI = "Spotlight"
    THRU = "Thruster"
    TISH = "Timer Shutdown"
    TIST = "Timer Standby"
}

@connect {
    * Uses Event Controller to trigger auto lock of Connector Main
    Write to \LCIN = "CONNECTING"
    Color of \LIGH = 255:255:0
    Blink Interval of \LIGH = 1
    Delay 3000
    If Status of UMG-6 Connector Main = Connectable {
        Write to \LCIN = "CONNECTED"
        Lock \COMA
        Delay 2000
        Blink Interval of \LIGH = 0
        Color of \LIGH = 250:250:255
        Delay 500
        Color of \LIST = 255:255:255
        Recharge \BATT
        Stockpile of \HYTA = True
    }
    OnOff_Off \EVC2
}

@autostart {
    * Uses Event Controller to trigger when player enters Cockpit
    @offlinetostandby
    If Status of UMG-6 Connector Main = Unconnected {
        Delay 3000
        @standbytoonline
    }
}

@runmode {
    if Color of UMG-6 Light Status = 255:0:0
    {
        @offlinetostandby
    }
    else if Color of UMG-6 Light Status = 255:255:0
    {
        @standbytoonline
    }
    else if Color of UMG-6 Light Status = 255:255:255
    {
        @onlinetostandby
    }
    else if Color of UMG-6 Light Status = 255:255:50
    {
        @standbytooffline
    }
}

@offlinetostandby {
    Color of \LIST = 255:255:0
    Write to \LCIN = Standby
    OnOff_On \ANTE
    OnOff_On \GATU
    OnOff_On \LIPA
    OnOff_On \LIST
    OnOff_On \O2H2
    OnOff_Off \ORDE
    OnOff_On \ROAR
    OnOff_Off \AIVE
    OnOff_Off \EXPI
    OnOff_Off \HYEN
    OnOff_Off \HELI
    OnOff_Off \SPLI
    Stop \TIST
    Stop \TISH
}

@standbytoonline {
    Color of \LIST = 255:255:255
    Write to \LCIN = Active
    OnOff_On \AIVE
    OnOff_On \EXPI
    OnOff_On \HYEN
    OnOff_On \HELI
    OnOff_On \ORDE
    OnOff_On \LIPA
    Stop \TIST
    Stop \TISH
    Stockpile of \HYTA = False
    Discharge \BATT
    Unlock \COMA
    Delay 5000
    OnOff_On \EVC2
}

@onlinetostandby {
    Color of \LIST = 255:255:50
    Write to \LCIN = Standby
    OnOff_On \ANTE
    OnOff_On \GATU
    OnOff_Off \LIPA
    OnOff_On \LIST
    OnOff_On \O2H2
    OnOff_Off \ORDE
    OnOff_On \ROAR
    OnOff_Off \AIVE
    OnOff_Off \EXPI
    OnOff_Off \HYEN
    OnOff_Off \HELI
    OnOff_Off \SPLI
}

@standbytooffline {
    Color of \LIST = 255:0:0
    Write to \LCIN = Powered Down
    OnOff_Off \ANTE
    OnOff_Off \AIVE
    OnOff_Off \EXPI
    OnOff_Off \GATU
    OnOff_Off \HYEN
    OnOff_Off \LIST
    OnOff_Off \HELI
    OnOff_Off \SPLI
    OnOff_Off \O2H2
    OnOff_Off \ROLI
    OnOff_Off \ROAR
}

@miningmode {
    OnOff_On \SPLI
    OnOff_On \ROLI
    OnOff_On \LIPA
    Color of \SPLI = 255:255:0
    Color of \ROLI = 255:255:0
    Color of \LIPA = 255:255:0
}

@haulingmode {
    OnOff_Off \ROLI
    Color of \SPLI = 55:155:255
    Color of \ROLI = 55:155:255
    Color of \LIPA = 55:155:255
}

@pistonjacks {
    Reverse \PIJA
}

@variables{
    * Abreviated names for blocks
    AIVE = "UCX-11 Air Vent Fan"
    ANTE = "UCX-11 Antenna"
    BATT = "UCX-11 Battery"
    COMA = "UCX-11 Connector Main"
    COSE = "UCX-11 Connector Second"
    EVC1 = "UCX-11 Event Controller - Land"
    EVC2 = "UCX-11 Event Controller - Cockpit"
    EVC3 = "UCX-11 Event Controller - Altitude"
    EVC4 = "UCX-11 Event Controller - Lock"
    GYRO = "UCX-11 Gyroscope"
    HEVE = "UCX-11 Heat Vent"
    HYTA = "UCX-11 Hydrogen Tank"
    LAMP = "UCX-11 Landing Magnetic Plate"
    LAMF = "UCX-11 Landing Magnetic Plate Front 1"
    LAMB = "UCX-11 Landing Magnetic Plate Back"
    LAND = "UCX-11 Landing Piston"
    LCIN = "UCX-11 LCD Info"
    LIPA = "UCX-11 Light Panel Floor"
    LIST = "UCX-11 Light Status"
    LISE = "UCX-11 Light Search"
    LINA = "UCX-11 Light Nav"
    LIFL = "UCX-11 Light Flight"
    LIGH = "UCX-11 Light"
    MOCO = "UCX-11 Module Connector"
    MOCF = "UCX-11 Module Connector Front"
    MOHI = "UCX-11 Module Hinge"
    MOME = "UCX-11 Module Merge"
    MOMF = "UCX-11 Module Merge Front"
    O2H2 = "UCX-11 O2/H2 Generator"
    LAPI = "UCX-11 Landing Piston"
    TURR = "UCX-11 Turret" 
    THRU = "UCX-11 Hydrogen Thruster"
    TISH = "UCX-11 Timer Shutdown"
    TIST = "UCX-11 Timer Standby"
}

@info {
    Write to \LCIN = EAP - V.2.81
    WriteLine to \LCIN = FSD - V0.39
    WriteLine to \LCIN = SDS - V0.00
    WriteLine to \LCIN = Craft - V0.00
}

@module_toggle{
    * Safety - if landed dont do anything
    If Status of UCX-11 Module Connector Front = Unconnected {
        Write to \LCIN = "Not Connected"
        Delay 3000
        @module_lock
    }
    Else If Status of UCX-11 Module Merge Front = Merged {
        Write to \LCIN = "Is Connected"
        Delay 3000
        @module_release
    }
    
}

@module_lock{
    * Safety - if landed dont do anything
    * Triggered by Menu
    Write to \LCIN = "Module Mode Activated"
    if Status of UCX-11 Landing Magnetic Plate Front 1 = Locked {
        Delay 1000
        WriteLine to \LCIN = "ERROR... Check Maglocks"
    }
    else {
        OnOff_Off \EVC1
        OnOff_Off \EVC2
        OnOff_On \MOME
        OnOff_On \LIPA
        Rotate \MOHI to 90 at 3
        Delay 3000
        OnOff_Off \EVC3
        Write to \LCIN = "Ready to Connect"
        Delay 20000
        Lock \MOCO
        If Status of UCX-11 Module Connector Front = Unconnected {
            Color of \LIPA = 255:0:55
            Write to \LCIN = "Module Bad"
            Delay 3000
            @module_release
        }
        Else {
            Color of \LIPA = 128:0:128
            Write to \LCIN = "Module Good"
        }
    }
}

@module_release{
    Write to \LCIN = "Module Drop Prepping"
    Delay 3000
    OnOff_Off \MOME
    Delay 1000
    Unlock \MOCO
    Color of \LIST = 0:255:0
    WriteLine to \LCIN = "Module Released"
    Delay 1000
    OnOff_Off \MOCO
    Rotate \MOHI to -30 at 1
    Color of \LIST = 255:255:255
    OnOff_On \EVC3
    @low_alt
    OnOff_On \MOCO
}

@high_alt{
    * Triggered by Event Controller checking Altitude
    OnOff_Off \LIPA
    Write to \LCIN = "HIGH ALTITUDE"
    OnOff_Off \EVC1
}

@low_alt{
    * Triggered by Event Controller checking Altitude
    Color of \LIPA = 255:255:255
    OnOff_On \LIPA
    Write to \LCIN = "LOW ALTITUDE"
    OnOff_On \EVC1
}

@land_on{
    * Triggered by Event Controller checking if close to object
    Write to \LCIN = "LOCK AVAILABLE"
    OnOff_On \EVC4
    OnOff_On \EVC2
    Color of \LIPA = 255:255:0
    Delay 1000
    Move \LAND to 2 at 0.2
    Delay 6000
    OnOff_On \LAMB
}

@land_off{
    * Triggered by Event Controller checking if close to object
    Write to \LCIN = "LOCK LOST"
    Move \LAND to 0 at 0.5
    OnOff_Off \EVC2
    Color of \LIPA = 255:255:255
    OnOff_Off \LAMB
}

@lock{
    Write to \LCIN = "LOCKING DOWN"
    Damp of MyShip = False
    Delay 3000
    Lock \LAMP
    Write to \LCIN = "LOCKED DOWN"
    OnOff_Off \EVC1
    OnOff_Off \EVC4
    Color of \LIPA = 0:255:0
    Delay 3000
    @connect
}

@connect{
    * Run by @lock
    Write to \LCIN = "CHECKING CONNECTORS"
    Color of \LIPA = 255:255:0
    Delay 3000
    If Status of UCX-11 Connector Main = Connectable {
        Write to \LCIN = "CONNECTED MAIN"
        Lock \COMA
        Color of \LIPA = 0:255:0
        Delay 500
        Recharge \BATT
        Stockpile of \HYTA = True
    }
    Else If Status of UCX-11 Connector Second = Connectable {
        Write to \LCIN = "CONNECTED SECOND"
        Lock \COSE
        Color of \LIPA = 0:255:0
        Delay 500
        Recharge \BATT
        Stockpile of \HYTA = True
    }
    Else {
        WriteLine to \LCIN = "NO CONNECTORS"
        Color of \LIPA = 255:0:0
        Delay 3000
        Color of \LIPA = 255:255:255
    }
    Delay 3000
    @onlinetostandby
}

@launch{
    Write to \LCIN = "PREPPING FLIGHT"
    @offlinetostandby
    Discharge \BATT
    Stockpile of \HYTA = False
    Delay 3000
    Write to \LCIN = "Unlocking Connections"
    Unlock \COMA
    Unlock \COSE
    Delay 3000
    Unlock \LAMP
    Delay 3000
    Write to \LCIN = "Flight Sys ON"
    Damp of MyShip = True
    @standbytoonline
    Delay 3000
    Write to \LCIN = "FLIGHT GO GO"
    Delay 3000
    OnOff_On \EVC1
    Move \LAND to 0 at 0.5
}

@runmode{
    if Color of UCX-11 Light Status = 255:0:0
    {
        @offlinetostandby
    }
    else if Color of UCX-11 Light Status = 255:255:0
    {
        @standbytoonline
    }
    else if Color of UCX-11 Light Status = 255:255:255
    {
        @onlinetostandby
    }
    else if Color of UCX-11 Light Status = 255:255:50
    {
        @standbytooffline
    }
}

@offlinetostandby{
    Stop \TISH
    Stop \TIST
    OnOff_On \AIVE
    OnOff_On \HEVE
    OnOff_On \O2H2
    OnOff_On \ANTE
    OnOff_On \TURR
    OnOff_On \LIFL
    Color of \LIST = 255:255:0
    Color of \LIPA = 255:255:0
    Write to \LCIN = "Standby"
}

@standbytoonline{
    Damp of MyShip = True
    OnOff_On \GYRO
    OnOff_On \THRU
    OnOff_On \LINA
    OnOff_On \LIPA
    Color of \LIST = 255:255:255
    Color of \LIPA = 255:255:255
    Write to \LCIN = "Active"
}

@onlinetostandby{
    Damp of MyShip = False
    OnOff_Off \GYRO
    OnOff_Off \THRU
    OnOff_Off \LINA
    OnOff_Off \LISE
    Color of \LIST = 255:255:50
    Color of \LIPA = 255:255:50
    Write to \LCIN = "Standby"
}

@standbytooffline{
    OnOff_Off \AIVE
    OnOff_Off \HEVE
    OnOff_Off \O2H2
    OnOff_Off \ANTE
    OnOff_Off \LIGH
    OnOff_Off \TURR
    Color of \LIST = 255:0:0
    Color of \LIPA = 255:0:0
    Write to \LCIN = "Powered Down"
}

@variables{
    * Abreviated names for blocks
    AIVE = "Air Vent Fan"
    ANTE = "Antenna"
    BATT = "Battery"
    BEAC = "Beacon"
    COMA = "Connector Main"
    EVC2 = "Event Controller - Connect"
    EXPI = "Exhaust Pipe"
    GATU = "Gatling Turret"
    GYRO = "Gyroscope"
    HELI = "Headlight"
    HLL1 = "Hinge Landing Leg 1"
    HYEN = "Hydrogen Engine"
    HYTA = "Hydrogen Tank"
    LCIN = "LCD Info"
    LIGH = "Light"
    LIPA = "Light Panel Floor"
    LIST = "Light Status"
    O2H2 = "O2/H2 Generator"
    ORDE = "Ore Detector"
    PAHA = "Parachute Hatch"
    PRPA = "Program [PAM]"
    PIJA = "Piston Jack"
    ROAR = "Rotor Arm"
    ROLI = "Rotating Light"
    SPLI = "Spotlight"
    THRU = "Thruster"
    TISH = "Timer Shutdown"
    TIST = "Timer Standby"
}

@low_alt{
    OnOff_On \LIPA
    Rotate \HLL1 to 55 at -5
    Write to \LCIN = "LOW ALTITUDE"
}

@high_alt{
    OnOff_Off \LIPA
    Rotate \HLL1 to 85 at 5
    Write to \LCIN = "HIGH ALTITUDE"
}

@failure{
    OnOff_Off \PRPA
    OnOff_Off \THRU
    OnOff_Off \GYRO
    OnOff_On \BEAC
    Open_On \PAHA
    Write to \LCIN = "ASSISTANCE REQUIRED"
}

@info {
    Write to \LCIN = EAP - V.1.05
    WriteLine to \LCIN = Craft - V1.03
}

@variables{
    * Abreviated names for blocks
    AIVE = "UMG-6 Air Vent Fan"
    ANTE = "UMG-6 Antenna"
    BATT = "UMG-6 Battery"
    COMA = "UMG-6 Connector Main"
    EVC2 = "UMG-6 Event Controller - Connect"
    EXPI = "UMG-6 Exhaust Pipe"
    GATU = "UMG-6 Gatling Turret"
    HELI = "UMG-6 Headlight"
    HYEN = "UMG-6 Hydrogen Engine"
    HYTA = "UMG-6 Hydrogen Tank"
    LCIN = "UMG-6 LCD Info"
    LIGH = "UMG-6 Light"
    LIPA = "UMG-6 Light Panel Floor"
    LIST = "UMG-6 Light Status"
    O2H2 = "UMG-6 O2/H2 Generator"
    ORDE = "UMG-6 Ore Detector"
    PIJA = "UMG-6 Piston Jack"
    ROAR = "UMG-6 Rotor Arm"
    ROLI = "UMG-6 Rotating Light"
    SPLI = "UMG-6 Spotlight"
    TISH = "UMG-6 Timer Shutdown"
    TIST = "UMG-6 Timer Standby"
}

@connect {
    * Uses Event Controller to trigger auto lock of Connector Main
    Write to \LCIN = "CONNECTING"
    Color of \LIGH = 255:255:0
    Blink Interval of \LIGH = 1
    Delay 3000
    If Status of UMG-6 Connector Main = Connectable {
        Write to \LCIN = "CONNECTED"
        Lock \COMA
        Delay 2000
        Blink Interval of \LIGH = 0
        Color of \LIGH = 250:250:255
        Delay 500
        Color of \LIST = 255:255:255
        Recharge \BATT
        Stockpile of \HYTA = True
    }
    OnOff_Off \EVC2
}

@autostart {
    * Uses Event Controller to trigger when player enters Cockpit
    @offlinetostandby
    If Status of UMG-6 Connector Main = Unconnected {
        Delay 3000
        @standbytoonline
    }
}

@runmode {
    if Color of UMG-6 Light Status = 255:0:0
    {
        @offlinetostandby
    }
    else if Color of UMG-6 Light Status = 255:255:0
    {
        @standbytoonline
    }
    else if Color of UMG-6 Light Status = 255:255:255
    {
        @onlinetostandby
    }
    else if Color of UMG-6 Light Status = 255:255:50
    {
        @standbytooffline
    }
}

@offlinetostandby {
    Color of \LIST = 255:255:0
    Write to \LCIN = Standby
    OnOff_On \ANTE
    OnOff_On \GATU
    OnOff_On \LIPA
    OnOff_On \LIST
    OnOff_On \O2H2
    OnOff_Off \ORDE
    OnOff_On \ROAR
    OnOff_Off \AIVE
    OnOff_Off \EXPI
    OnOff_Off \HYEN
    OnOff_Off \HELI
    OnOff_Off \SPLI
    Stop \TIST
    Stop \TISH
}

@standbytoonline {
    Color of \LIST = 255:255:255
    Write to \LCIN = Active
    OnOff_On \AIVE
    OnOff_On \EXPI
    OnOff_On \HYEN
    OnOff_On \HELI
    OnOff_On \ORDE
    OnOff_On \LIPA
    Stop \TIST
    Stop \TISH
    Stockpile of \HYTA = False
    Discharge \BATT
    Unlock \COMA
    Delay 5000
    OnOff_On \EVC2
}

@onlinetostandby {
    Color of \LIST = 255:255:50
    Write to \LCIN = Standby
    OnOff_On \ANTE
    OnOff_On \GATU
    OnOff_Off \LIPA
    OnOff_On \LIST
    OnOff_On \O2H2
    OnOff_Off \ORDE
    OnOff_On \ROAR
    OnOff_Off \AIVE
    OnOff_Off \EXPI
    OnOff_Off \HYEN
    OnOff_Off \HELI
    OnOff_Off \SPLI
}

@standbytooffline {
    Color of \LIST = 255:0:0
    Write to \LCIN = Powered Down
    OnOff_Off \ANTE
    OnOff_Off \AIVE
    OnOff_Off \EXPI
    OnOff_Off \GATU
    OnOff_Off \HYEN
    OnOff_Off \LIST
    OnOff_Off \HELI
    OnOff_Off \SPLI
    OnOff_Off \O2H2
    OnOff_Off \ROLI
    OnOff_Off \ROAR
}

@miningmode {
    OnOff_On \SPLI
    OnOff_On \ROLI
    OnOff_On \LIPA
    Color of \SPLI = 255:255:0
    Color of \ROLI = 255:255:0
    Color of \LIPA = 255:255:0
}

@haulingmode {
    OnOff_Off \ROLI
    Color of \SPLI = 55:155:255
    Color of \ROLI = 55:155:255
    Color of \LIPA = 55:155:255
}

@pistonjacks {
    Reverse \PIJA
}

@info {
    Write to \LCIN = EAP - V.1.08
    WriteLine to \LCIN = FSD - V1.00
    WriteLine to \LCIN = LCD - V1.00
    WriteLine to \LCIN = SDS - V1.01
    WriteLine to \LCIN = Craft - V1.05
}

@craft_para {
    * Ship Name
    * Length
    * width
    * Height
    * Weight
    * Max Speed
    * Amount of Batteries / Hydrogen Engines / Hydrogen Tanks
    * Wheel max power / Average power usage???
    * Range???
    * If has wheels ele flyable ship
}

@var {
    Craft = Grid Name of MyGrid
    ILCD = UTG-7 LCD Info
}

@variables{
    Mass of MyShip = MASS
    LIST = "Light Status"
    LCIN = "LCD Info"
}

@test{
    Write to \LCIN = \MASS
}

@variables{
    LCIN = "LCD Info"
    Mass of MyShip = aa
}

@test{
    Write to \LCIN = "{Mass of MyShip}"
}

@variables{
    LCIN = "LCD Info"
    x = Mass of MyShip
    y = Gravity of MyShip
}

@test{
    Write to \LCIN = "Gravity = \y"
    WriteLine to \LCIN = "Mass = \x kg"
}

@test{
    Torque of Hinge Main = 10000
    LowerLimit of Hinge Main = -10
}

@info{
    Write to LCD Info = "{Show Offroad Short Wheel Suspension 3x3 Left}"
}

@test{
    Torque of Hinge Main = 10000
    LowerLimit of Hinge Main = -10
    MaxSteerAngle of Wheel = 10
    Power of Wheel = 10
    EnableParking of Wheel = True
    SpeedLimit of Wheel = 10
}

*FontSize

@variables{
    * Blocks
    LIST = "Light Status"
    LCIN = "LCD Info"
    LCST = "LCD Status"
    WHAL = "Wheel Suspension"
    WHSF = "Wheel Suspension Front"
    WHSB = "Wheel Suspension Back"
    * Calculations
    v = "0"
    w = "4"
    x = Mass of MyShip
    y = Gravity of MyShip
    z = "0"
}

@gear_up{
    if Color of Light Status = 255:0:0{
        @gear_1
    }
    else if Color of Light Status = 0:255:0{
        @gear_2
    }
    else if Color of Light Status = 50:255:0{
        @gear_3
    }
    else if Color of Light Status = 100:255:0{
        @gear_4
    }
    else if Color of Light Status = 150:255:0{
        @gear_5
    }
}

@gear_down{
    if Color of Light Status = 200:255:0{
        @gear_4
    }
    else if Color of Light Status = 150:255:0{
        @gear_3
    }
    else if Color of Light Status = 100:255:0{
        @gear_2
    }
    else if Color of Light Status = 50:255:0{
        @gear_1
    }
    else if Color of Light Status = 0:255:0{
        @park
    }
}

@park{
    Color of \LIST = 255:0:0
    Write to \LCIN = P
    \z = math((((\x*\y)/100)/\w)*1)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 0
    MaxSteerAngle of \WHSB = 0
    Power of \WHAL = 0
    Speed Limit of \WHAL = 0
}

@gear_1{
    Color of \LIST = 0:255:0
    Write to \LCIN = 1
    \z = math((((\x*\y)/100)/\w)*3)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 40
    MaxSteerAngle of \WHSB = 20
    Power of \WHAL = 100
    Speed Limit of \WHAL = 10
}

@gear_2{
    Color of \LIST = 50:255:0
    Write to \LCIN = 2
    \z = math((((\x*\y)/100)/\w)*4)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 30
    MaxSteerAngle of \WHSB = 15
    Power of \WHAL = 80
    Speed Limit of \WHAL = 30
}

@gear_3{
    Color of \LIST = 100:255:0
    Write to \LCIN = 3
    \z = math((((\x*\y)/100)/\w)*5)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 20
    MaxSteerAngle of \WHSB = 10
    Power of \WHAL = 60
    Speed Limit of \WHAL = 60
}

@gear_4{
    Color of \LIST = 150:255:0
    Write to \LCIN = 4
    \z = math((((\x*\y)/100)/\w)*6)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 10
    MaxSteerAngle of \WHSB = 5
    Power of \WHAL = 40
    Speed Limit of \WHAL = 90
}

@gear_5{
    Color of \LIST = 200:255:0
    Write to \LCIN = 5
    \z = math((((\x*\y)/100)/\w)*7)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 5
    MaxSteerAngle of \WHSB = 0
    Power of \WHAL = 20
    Speed Limit of \WHAL = 120
}

@info{
    Show Cockpit
}

@variables{
    * Blocks
    LIST = "Light Status"
    LCIN = "LCD Info"
    LCST = "LCD Status"
    HISM = "Hinge Suspension Main"
    WHAL = "Wheel Suspension"
    WHSF = "Wheel Suspension Front"
    WHSB = "Wheel Suspension Back"
    * Calculations
    v = "0"
    w = "4"
    x = Mass of MyShip
    y = Gravity of MyShip
    z = "0"
}

@gear_up{
    if Color of Light Status = 255:0:0{
        @gear_1
    }
    else if Color of Light Status = 0:255:0{
        @gear_2
    }
    else if Color of Light Status = 50:255:0{
        @gear_3
    }
    else if Color of Light Status = 100:255:0{
        @gear_4
    }
    else if Color of Light Status = 150:255:0{
        @gear_5
    }
}

@gear_down{
    if Color of Light Status = 200:255:0{
        @gear_4
    }
    else if Color of Light Status = 150:255:0{
        @gear_3
    }
    else if Color of Light Status = 100:255:0{
        @gear_2
    }
    else if Color of Light Status = 50:255:0{
        @gear_1
    }
    else if Color of Light Status = 0:255:0{
        @park
    }
}

@park{
    Color of \LIST = 255:0:0
    Write to \LCIN = P
    Rotate \HISM to 0 at 1
    \z = math((((\x*\y)/100)/\w)*1)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    Torque of \HISM = \z
    MaxSteerAngle of \WHSF = 0
    MaxSteerAngle of \WHSB = 0
    Power of \WHAL = 0
    Speed Limit of \WHAL = 0
}

@gear_1{
    Color of \LIST = 0:255:0
    Write to \LCIN = 1
    Rotate \HISM to 35 at 30
    \z = math((((\x*\y)/100)/\w)*6)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    Torque of \HISM = \z
    MaxSteerAngle of \WHSF = 25
    MaxSteerAngle of \WHSB = 13
    Power of \WHAL = 100
    Speed Limit of \WHAL = 10
}

@gear_2{
    Color of \LIST = 50:255:0
    Write to \LCIN = 2
    Rotate \HISM to 30 at 30
    \z = math((((\x*\y)/100)/\w)*7)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    Torque of \HISM = \z
    MaxSteerAngle of \WHSF = 20
    MaxSteerAngle of \WHSB = 10
    Power of \WHAL = 80
    Speed Limit of \WHAL = 30
}

@gear_3{
    Color of \LIST = 100:255:0
    Write to \LCIN = 3
    Rotate \HISM to 20 at 30
    \z = math((((\x*\y)/100)/\w)*8)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    Torque of \HISM = \z
    MaxSteerAngle of \WHSF = 15
    MaxSteerAngle of \WHSB = 8
    Power of \WHAL = 60
    Speed Limit of \WHAL = 60
}

@gear_4{
    Color of \LIST = 150:255:0
    Write to \LCIN = 4
    Rotate \HISM to 10 at 30
    \z = math((((\x*\y)/100)/\w)*9)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    Torque of \HISM = \z
    MaxSteerAngle of \WHSF = 10
    MaxSteerAngle of \WHSB = 5
    Power of \WHAL = 40
    Speed Limit of \WHAL = 90
}

@gear_5{
    Color of \LIST = 200:255:0
    Write to \LCIN = 5
    Rotate \HISM to 0 at 30
    \z = math((((\x*\y)/100)/\w)*10)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    Torque of \HISM = \z
    MaxSteerAngle of \WHSF = 5
    MaxSteerAngle of \WHSB = 0
    Power of \WHAL = 20
    Speed Limit of \WHAL = 120
}

@info{
    Show Cockpit
}

@variables{
    * Blocks
    UTG-12 Air Vent Fan
    UTG-12 Spotlight
    UTG-12 Headlight
    UTG-12 Rotor Front
    UTG-12 Rotor Back
    UTG-12 Battery
    UTG-12 Hydrogen Tank
    UTG-12 Connector
    UTG-12 Gyroscope
    UTG-12 Hydrogen Engine
    UTG-12 LCD Front Bumper
    UTG-12 Wheel Suspension Back Left
    UTG-12 Wheel Suspension Back Right
    UTG-12 Wheel Suspension Front Left
    UTG-12 Wheel Suspension Front Right
    UTG-12 Main Sus
    LIST = "UTG-12 Light Status"
    LCIN = "UTG-12 LCD Info"
    LCST = "UTG-12 LCD Status"
    * Calculations
    v = "0"
    w = "4"
    x = Mass of MyShip
    y = Gravity of MyShip
    z = "0"
}

@gear_up{
    if Color of UTG-12 Light Status = 255:0:0{
        @gear_1
    }
    else if Color of UTG-12 Light Status = 0:255:0{
        @gear_2
    }
    else if Color of UTG-12 Light Status = 50:255:0{
        @gear_3
    }
    else if Color of UTG-12 Light Status = 100:255:0{
        @gear_4
    }
    else if Color of UTG-12 Light Status = 150:255:0{
        @gear_5
    }
}

@gear_down{
    if Color of UTG-12 Light Status = 200:255:0{
        @gear_4
    }
    else if Color of UTG-12 Light Status = 150:255:0{
        @gear_3
    }
    else if Color of UTG-12 Light Status = 100:255:0{
        @gear_2
    }
    else if Color of UTG-12 Light Status = 50:255:0{
        @gear_1
    }
    else if Color of UTG-12 Light Status = 0:255:0{
        @park
    }
}

@park{
    Color of \LIST = 255:0:0
    Write to \LCIN = P
    \z = math((((\x*\y)/100)/\w)*1)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 0
    MaxSteerAngle of \WHSB = 0
    Power of \WHAL = 0
    Speed Limit of \WHAL = 0
}

@gear_1{
    Color of \LIST = 0:255:0
    Write to \LCIN = 1
    \z = math((((\x*\y)/100)/\w)*6)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 25
    MaxSteerAngle of \WHSB = 13
    Power of \WHAL = 100
    Speed Limit of \WHAL = 10
}

@gear_2{
    Color of \LIST = 50:255:0
    Write to \LCIN = 2
    \z = math((((\x*\y)/100)/\w)*7)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 20
    MaxSteerAngle of \WHSB = 10
    Power of \WHAL = 80
    Speed Limit of \WHAL = 30
}

@gear_3{
    Color of \LIST = 100:255:0
    Write to \LCIN = 3
    \z = math((((\x*\y)/100)/\w)*8)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 15
    MaxSteerAngle of \WHSB = 8
    Power of \WHAL = 60
    Speed Limit of \WHAL = 60
}

@gear_4{
    Color of \LIST = 150:255:0
    Write to \LCIN = 4
    \z = math((((\x*\y)/100)/\w)*9)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 10
    MaxSteerAngle of \WHSB = 5
    Power of \WHAL = 40
    Speed Limit of \WHAL = 90
}

@gear_5{
    Color of \LIST = 200:255:0
    Write to \LCIN = 5
    \z = math((((\x*\y)/100)/\w)*10)
    \v = math(\z/1000)
    Strength of \WHAL = \v
    Write to \LCST = "Grav = \y"
    WriteLine to \LCST = "Mass = \x kg"
    WriteLine to \LCST = "Force = \z"
    WriteLine to \LCST = "Susp = \v Nm"
    MaxSteerAngle of \WHSF = 5
    MaxSteerAngle of \WHSB = 0
    Power of \WHAL = 20
    Speed Limit of \WHAL = 120
}

@info{
    Show Cockpit
}

@variables{
    * Blocks
    LIST = "UTG-12 Light Status"
    LCIN = "UTG-12 LCD Info"
    MASU = "UTG-12 Main Sus"
    WHSU = "UTG-12 Wheel Suspension"
    WHSF = "UTG-12 Wheel Suspension Front"
    WHSB = "UTG-12 Wheel Suspension Back"
}

@gear_up{
    if Color of UTG-12 Light Status = 255:0:0{
        @gear_1
    }
    else if Color of UTG-12 Light Status = 0:255:0{
        @gear_2
    }
    else if Color of UTG-12 Light Status = 50:255:0{
        @gear_3
    }
    else if Color of UTG-12 Light Status = 100:255:0{
        @gear_4
    }
    else if Color of UTG-12 Light Status = 150:255:0{
        @gear_5
    }
}

@gear_down{
    if Color of UTG-12 Light Status = 200:255:0{
        @gear_4
    }
    else if Color of UTG-12 Light Status = 150:255:0{
        @gear_3
    }
    else if Color of UTG-12 Light Status = 100:255:0{
        @gear_2
    }
    else if Color of UTG-12 Light Status = 50:255:0{
        @gear_1
    }
    else if Color of UTG-12 Light Status = 0:255:0{
        @park
    }
}

@park{
    Color of \LIST = 255:0:0
    Write to \LCIN = P
    Power of \WHSU = 0
    Speed Limit of \WHSU = 0
    MaxSteerAngle of \WHSF = 0
    MaxSteerAngle of \WHSB = 0
}

@gear_1{
    Color of \LIST = 0:255:0
    Write to \LCIN = 1
    Strength of \MASU = 10
    Strength of \WHSU = 10
    Power of \WHSU = 85
    Speed Limit of \WHSU = 10
    MaxSteerAngle of \WHSF = 25
    MaxSteerAngle of \WHSB = 13
}

@gear_2{
    Color of \LIST = 50:255:0
    Write to \LCIN = 2
    Strength of \MASU = 15
    Strength of \WHSU = 20
    Power of \WHSU = 65
    Speed Limit of \WHSU = 20
    MaxSteerAngle of \WHSF = 20
    MaxSteerAngle of \WHSB = 10
}

@gear_3{
    Color of \LIST = 100:255:0
    Write to \LCIN = 3
    Strength of \MASU = 20
    Strength of \WHSU = 30
    Power of \WHSU = 45
    Speed Limit of \WHSU = 40
    MaxSteerAngle of \WHSF = 15
    MaxSteerAngle of \WHSB = 7
}

@gear_4{
    Color of \LIST = 150:255:0
    Write to \LCIN = 4
    Strength of \MASU = 25
    Strength of \WHSU = 40
    Power of \WHSU = 25
    Speed Limit of \WHSU = 80
    MaxSteerAngle of \WHSF = 10
    MaxSteerAngle of \WHSB = 5
}

@gear_5{
    Color of \LIST = 200:255:0
    Write to \LCIN = 5
    Strength of \MASU = 30
    Strength of \WHSU = 50
    Power of \WHSU = 10
    Speed Limit of \WHSU = 160
    MaxSteerAngle of \WHSF = 5
    MaxSteerAngle of \WHSB = 0
}

@info {
    Write to \LCIN = EAP - V.1.16
    WriteLine to \LCIN = FSD - V0.00
    WriteLine to \LCIN = SDS - V0.00
    WriteLine to \LCIN = Craft - V0.39
}

@variables{
    * Abreviated names for blocks
    AIVE = Air Vent Fan
    ANTE = Antenna
    COMA = Connector Main
    EXPI = Exhaust Pipe
    GATU = Gatling Turret
    HELI = Headlight
    HYEN = Hydrogen Engine
    LCIN = LCD Info
    LIFL = Light Floor
    LIGH = Light
    LIPA = Light Panel Floor
    LIST = Light Status
    O2H2 = O2/H2 Generator
    ORDE = Ore Detector
    PIJA = Piston Jack
    ROAR = Rotor Arm
    ROLI = Rotating Light
    SPLI = Spotlight
    TISH = Timer Shutdown
    TIST = Timer Standby
    
}

@connect{
    * Uses Event Controller to trigger auto lock of Connector Main
    Write to LCIN = "CONNECTING"
    Color of LIGH = 255:255:0
    Blink Interval of LIGH = 1
    Delay 3000
    If Status of COMA = Connectable{
        Write to LCIN = "CONNECTED"
        Lock COMA
        Color of LIGH = 0:255:0
        Delay 2000
        Blink Interval of LIGH = 0
        Color of LIGH = 250:250:255
        Delay 500
        Color of LIST = 255:255:255
    }
}

@exit{
    * Uses Event Controller to trigger timer to go into standby if exiting Cockpit
    Start TIST
    * Timer Standby after countdown will run 
}

@autostart{
    * Uses Event Controller to trigger when player enters Cockpit
    @offlinetostandby
    Delay 3000
    @standbytoonline
}

@runmode
{
    if Color of LIST = 255:0:0
    {
        @offlinetostandby
    }
    else if Color of LIST = 255:255:0
    {
        @standbytoonline
    }
    else if Color of LIST = 255:255:255
    {
        @onlinetostandby
    }
    else if Color of LIST = 255:255:50
    {
        @standbytooffline
    }
}

@offlinetostandby{
    Color of LIST = 255:255:0
    Write to LCIN = Standby
    OnOff_On ANTE
    OnOff_On GATU
    OnOff_On LIFL
    OnOff_On LIST
    OnOff_On O2H2
    OnOff_Off ORDE
    OnOff_On ROAR
    OnOff_Off AIVE
    OnOff_Off EXPI
    OnOff_Off HYEN
    OnOff_Off HELI
    OnOff_Off SPLI
    Stop TIST
    Stop TISH
}

@standbytoonline{
    Color of LIST = 255:255:255
    Write to LCIN = Active
    OnOff_On AIVE
    OnOff_On EXPI
    OnOff_On HYEN
    OnOff_On HELI
    OnOff_On ORDE
    Stop TIST
    Stop TISH
}

@onlinetostandby{
    Color of LIST = 255:255:50
    Write to LCIN = Standby
    OnOff_On ANTE
    OnOff_On GATU
    OnOff_On LIPA
    OnOff_On LIST
    OnOff_On O2H2
    OnOff_Off ORDE
    OnOff_On ROAR
    OnOff_Off AIVE
    OnOff_Off EXPI
    OnOff_Off HYEN
    OnOff_Off HELI
    OnOff_Off SPLI
    Start TISH
}

@standbytooffline{
    Color of LIST = 255:0:0
    Write to LCIN = Powered Down
    OnOff_Off ANTE
    OnOff_Off AIVE
    OnOff_Off EXPI
    OnOff_Off GATU
    OnOff_Off HYEN
    OnOff_Off LIPA
    OnOff_Off LIST
    OnOff_Off HELI
    OnOff_Off SPLI
    OnOff_Off O2H2
    OnOff_Off ROLI
    OnOff_Off ROAR
}

@miningmode{
    OnOff_On SPLI
    OnOff_On ROLI
    OnOff_On LIPA
    Color of SPLI = 255:255:0
    Color of ROLI = 255:255:0
    Color of LIPA = 255:255:0
}

@haulingmode{
    OnOff_Off ROLI
    Color of SPLI = 55:155:255
    Color of ROLI = 55:155:255
    Color of LIPA = 55:155:255
}

@pistonjacks{
    Reverse PIJA
}

TERMS AND DEFINITIONS:
@ - Code Block - where a set of commands is stored to run a specific task
@rename {Rename \1 to \2}

Variables
@var {
    pos = Position of MyPiston}
@var {
    my = Grid Name of MyShip
    pos = Grid Position of MyShip
    rec = Send of MyShip
    help = 0
    }

DATA TYPES:
There are 5 data types that are defined by the representation of a variable:
    - Boolean type - can have two values ​​True or False
    - Number (Number) - a positive or negative number with a decimal point, the boundary values ​​of which are determined by the game properties of the block.
    - Color (Color) is the RGB representation of a triad of colors separated by ":", such as 0:0:255 (blue).
    - GPS coordinatesis a triad of X:Y:Z, for example " GPS:Base:-62664.81 : -80178.37:-27915.08:# ".
    - String (String) - Below is the initialization and output to the console of three string variables
        @vars { 
            name = Iroquois 
            type = "Impact Media" 
            value = "" 
        } 
        @view { 
            Console = "\name \N \type \value" 
        }

VARIABLE TYPES:
Easy Play variables come in two forms:
    - global , which are defined in a special @-block starting with @var and available to any script inside the automation. The @var block must be the first block in the CustomData field if you intend to use
        Global variables
            Address by name. The variable name must consist of letters, numbers, and characters.
            Global variable names must not start with numbers and must not match reserved system words like if , on , at , etc.
                @vars { * d is an invalid variable name because another variable name * dmin starts with it. Use something else like d1 d = 0 dmin = 100 }
            The initialization of any global variables in the @var block and the presence of spaces to the left and right of the "=" sign is mandatory , otherwise an error message will be displayed:
                @vars { ship = "" color = 100:0:255 gps = "GPS:Base:-62664.81:-80178.37:-27915.08:#" * will throw an error due to missing space between sign = and 0 distance =0 }
            Variables can be accessed by name inside any @-block by preceding it with "\" (backslash). When setting a new value, you can use the abbreviated or full form of Value of :
                @test { 
                    \ship = Grid Name of MyShip
                    Value of color = "0:0:200"
                    FontColor of LCD Info = \color
                    Write to LCD Info = "Корабль: \ship"
                    WriteLine to LCD Info = "База: \gps"
                }
    - local (dynamic) global variables that are created when the script is run from the BOP argument string, enumerated through "," using "()" (parentheses)
        They are initialized when the script is called through the "Argument" field of the Easy Play PB. For example, field of calling info(Airvent, Help) and then pressing " Run ".
            @info { 
                * print the "Help" header specified in the second variable to the area Echo Echo = "\2\N" 
                * print the properties and actions of the block named Airvent specified in the first variable to the console Show \1 
            }
        Hint: if you need to know if an argument was passed or not, use the following code:
            if \1 ? \ { Echo = "Call with no argument" }
        Using Variables
            Basically, variables are used to store block states and set those states. The thing is that in one line it is impossible to set the value of one block property based on another. For example, if the GPS coordinate is stored in the camera's CustomData, then you can't directly use this:
                @flights {
                    Fly to Data of Camera Lidar at 30
                    UpperLimit of Piston 1 = UpperLimit of Piston 2
                    \x = Data of Camera Lidar
                    Fly to \x at 30
                    \x = UpperLimit of Piston 2
                    UpperLimit of Piston 1 = \x
                }

VARIABLE VALUES
Assigning a value to a variable in Easy Play is different than in conventional programming. At any time, the variable does not store the value calculated at the time of initialization, but its representation , which will be calculated only at the time of the call:
    @variables { 
        * variable does not have a value for the piston position at the time of initialization 
        pos = Position of MyPiston 
        } 
    @test { 
        * accessing the variable will display the current piston position, for example 1.5 
        Echo = "Piston position: \pos" 
        }
This approach provides the possibility of flexible management of the state of individual blocks, but it can be overhead for group operations, for example, when inventorying the entire ship. In this case, it is useful to know the last computed value so that you do not have to re-inventory every time you access the variable representation.
    @vars { 
        x = 0 * the amount of ice in the inventory of O2/H2 generators 
        iceg = math(int(InvX Ice of O2\H2 Generator / 1000)) 
        } 
    @ice * fix the amount of ice in the O2/H2 generators in variable x \x = \iceg 
    if Value of x > 0 { 
        if StatusX of Oxygen Tank on MyGrid < 50 { 
            OnOff_On O2\H2 Generator 
        } 
    } 
    else { 
        OnOff_Off O2\H2 Generator 
    } 
    Echo = "\x tons of ice left"
If instead of x , we analyze by If and output the value of the iceg variable by Echo , then EasyPlay accesses its representation twice and performs an inventory, but fixing the value through another variable will allow it to be done only once.

IF/ELSE. SIMPLE LOGIC:
    Operators:
        =   Equals
        !=  Not Equals
        <   Less Than
        >   Greater Than
        ?   Included in String
        !?  Not Included in String
    @vars {
        \x = Angle of MyRotor
    }
    @check {
        IF Position Of MyPiston on MyGrid > \x {
            ...
        }
        Else If Value OF x = 90.0 {
             ...
        }
        else {
             ...
        } 
    }
    {if Position of Piston Escape = 7 { 
        if Angle of Rotor Escape = 180 { 
            Write to LCD Info = "Gate open" } 
        else { 
            Write to LCD Info = "Gate closed" } 
        } 
        else { 
            Write to LCD Info = "Gate closed" 
        }
    }
    {\x = cond(Position of Piston Escape = 7 & Angle of Rotor Escape = 180 : open : closed) Write to LCD Info = "Gate \x"}

CONDITIONAL LOOPS OR CLOSURES
@wheel_up { 
    * decrease the height of the wheel group 
    DecreaseHeight (APC, Wheels) 
    * if the height of the front left wheel is greater than -49 cm 
    if Height of Wheel 5x5 FL > -0.49 { 
        * perform a delay of 1/4 sec 
        Delay 250 
        * continue to decrease the height by calling himself 
        @wheel_up 
    } 
}

COMMANDS:
* - Comment     {* Anything on the same line of this asterix will be ignored}
# - Hash        {Override #Gyros} - will cause all gyroscopes to be overridden if their name begins with Gyro
! - Exclamation {Override ! Gyroscope 1} - will the interception be performed only for one gyroscope named Gyroscope 1
? - Question    {Override ?gyro turn} - will override all gyroscopes that have words beginning with "gyro" and "turn"
() - Groups     {Override (Gyroscopes)} - Overrides all gyroscopes in that group
Angle           {Angle of MyRotor}
Condition       {\x = cond(Position of Piston Escape = 0 : closed : open) Write to LCD Info = "Gate \x"}
DecreaseHeight  {DecreaseHeight (APC, Wheels)}
Delay           {Delay 3000}
Depressurize    {Depressurize Airvent} switches depressurization from one position to another
                {Depressurize_On Airvent}
                {Depressurize_Off Airvent}
Fly             {Fly to \gps at 100}
GPS             {\gps = "GPS:{Token[3] of Camera}:{Token[8] of Camera} :{Token[9] of Camera}:{Token[10] of Camera}:#"}
Grid            {MyGrid} - (main grid) - blocks located on the grid in which the Easy Play PB is installed
                {AllGrid} - MyGrid and all subgrids connected to the main one through dynamic blocks - rotors, hinges, pistons
                {MyShip} - AllGrid and all what is docked to it through the connectors
                {Grid_Name} - For example, " Unlock Connector on SE Escape Pod" will detach all connectors of the shuttle named "SE Escape Pod"
                {Over of Ion Thruster Forward on MyGrid = 50%}
                {IncreaseOverride Ion Thruster Forward on MyGrid}
If              {If Status of Galting = Target{
                * activates the alarm script
                @alert(Enemy Attack)
                }
                else{
                    @silent
                }
                }
                {if Position of Piston Escape = 0 { 
                    Write to LCD Info = "Gate closed" 
                    } 
                    else { 
                        Write to LCD Info = "Gate open" 
                    }
                }
                {If Status of MyConnector = Connectable {
                    Lock MyConnector
                    }
OnOff           {OnOff of AirVent = False}
                {OnOff of Door = True}
                {OnOff_Off Battery}
Override        {Override of Thruster = 100%}
Position        {Position of MyPiston} GPS???
UpperLimit      {UpperLimit of MyPiston = 7}
Rename          {Rename Block 1 to Block 2}
Reverse         {Reverse MyPiston}
Send            {Send = "SE Mothership:@call_shuttle"}
Set             {Set something to True/False Colour or Number}
Show            {Show Airvent}
                {Show[Property]}
Stop / End      {Stop}{End}
Write           {Write to LCD = "Closed"}
                {Write to Echo}
                {Write to Console}
                @ship_status {
                    Write to LCD Status = "< Connector Status>\N
                    {Status Connector of MyGrid}\N
                    <Assembler Status>\N
                    {Status Assembler  of MyGrid}"
                }

BLOCKS
LCD     {Write to LCD Info = "Gate closed"}

Piston  {Position of Piston Escape = 0}
Rotor   {Angle of Rotor Escape = 180}
Wheels  {Height of Wheel 5x5 FL}
        {DecreaseHeight}

status. The current state of the block
For different blocks, there are different intermediate states in which they can
be - the battery can be charged, the hangar doors can close, the turret can fire, and the connector can be ready for docking. Below is a list of states for the various block types that are available with the Status of Blocks on Grid

command , where Blocks is a selection of blocks and Grid is an optional MyGrid or AllGrid grid refinement (MyShip by default).

Assembler	Idle, Producing, Stopped - if there are no ingots for production, in ()
mode of operation: Assembly, Disassembly
Bac (O2/H2)	chdt = tank full percentage, in () storage mode: StockOn, StockOff
Batteries	chdt = charge percentage, in () state of charge: Auto, Recharge, Discharge
Ventilation	Depressurized, Depressurizing, Pressurized, Pressurizing
Wind generator	chdt = current output in watts, in () percentage of maximum output
Doors, gates, hangar doors	Opening, Open, Closing, Closed
Connector	Unconnected, Connectable, Connected, in () the name of the parked ship
Course weapons (machine guns, rocket launchers)	Idle, Ready, in () remaining ammo
laser antenna	Idle, RotatingToTarget, SearchingTargetForAntenna, Connecting, Connected, OutOfRange
Purifier	Idle, Producing
Jump Drive	chdt = jump distance in km, in () current state: Charging, Ready, Jumping)
Projector	string with ":" delimiter of 8 tokens:
1=blueprint present in projector, True/False
2=total number of blocks in blueprint
3=total number of functional blocks in blueprint
4=number of blocks that can be welded
5=missing functional blocks
6=missing pipelines
7=missing armor blocks
8=total % of missing blocks (damage), nft
Piston	Extending, Extended, Retracting, Retracted, Stopped - if speed is set to 0
Rotor and joint	Attached, Detached
Sensor	Idle or friendly faction player/grid name
A solar panel	chdt = current output in watts, in () percentage of maximum output
Connector	Idle, Merged
Sorter	Whitelist, Blacklist - mode, not filter list
Timer	Countdown - if countdown is in progress
Turrets automatic	Idle, Target - sees the target, Aimed - aims, in () the rest of the ammunition
Chassis and magnetic plates	Unlocked, ReadyToLock, Locked
Status[Active]. Block activity
To see how many blocks from the selection are active, use the Status[Active] command :
* will output 1/3 if one of the three Reactors in the group (Reactors) is active Echo = "{Status[Active] (Reactors) of MyShip}"
Hint: The resulting value can be used via a variable to translate math() . Can be abbreviated to StatusA

Status[Middle]. Average value
For blocks whose state is returned as a number with "." decimal point using Status[Middle] you can get the average value:
* if oxygen, including all tanks, is less than 75% if Status[Middle] Oxygen Tank of MyShip < 75 { * if there is ice in O2/H2 Generators if InvX of O2/H2 Generator > 0 { * enable all generators OnOff_On O2/H2 Generator } }
Note: 0 is returned for blocks of other types. Can be abbreviated to StatusM

Status[Total]. Total value
Applicable for blocks whose state is returned as a number with "." decimal point with:
* if the output level is less than 100 W 
if Status[Total] Solar Panel of MyShip < 100 {
     * start the OnOff_On Gydrogen Generator }
Note: for other block types, 0 is returned. Can be abbreviated to StatusT